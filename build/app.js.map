{"version":3,"sources":["../server/app.js"],"names":["express","require","graphqlHTTP","logger","cors","routes","app","use","schema","graphiql","pretty","req","res","next","err","Error","status","locals","message","error","get","json","module","exports"],"mappings":";;AASA;;;;AACA;;;;AAVA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,cAAcD,QAAQ,iBAAR,CAApB;AACA,IAAME,SAASF,QAAQ,QAAR,CAAf;AACA,IAAMG,OAAOH,QAAQ,MAAR,CAAb;;AAEA,IAAMI,SAASJ,QAAQ,gBAAR,CAAf;;AAGA;;;AAKA,IAAMK,MAAMN,SAAZ;;AAEAM,IAAIC,GAAJ,CAAQH,MAAR;AACAE,IAAIC,GAAJ,CAAQJ,OAAO,KAAP,CAAR;;AAEA;AACAG,IAAIC,GAAJ,CAAQ,GAAR,EAAaF,MAAb;;AAEA;AACAC,IAAIC,GAAJ,CAAQ,UAAR,EAAoBL,YAAY;AAAA,SAAO;AACrCM,6BADqC;AAErCC,cAAU,IAF2B;AAGrCC,YAAQ;AAH6B,GAAP;AAAA,CAAZ,CAApB;;AAOA;AACA;AACAJ,IAAIC,GAAJ,CAAQ,UAACI,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AAC1B,MAAMC,MAAM,IAAIC,KAAJ,CAAU,WAAV,CAAZ;AACAD,MAAIE,MAAJ,GAAa,GAAb;AACAH,OAAKC,GAAL;AACD,CAJD;;AAMA;AACAR,IAAIC,GAAJ,CAAQ,UAACO,GAAD,EAAMH,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,EAAyB;AAC/B;AACAD,MAAIK,MAAJ,CAAWC,OAAX,GAAqBJ,IAAII,OAAzB;AACAN,MAAIK,MAAJ,CAAWE,KAAX,GAAmBR,IAAIL,GAAJ,CAAQc,GAAR,CAAY,KAAZ,MAAuB,aAAvB,GAAuCN,GAAvC,GAA6C,EAAhE;;AAEA;AACAF,MAAII,MAAJ,CAAWF,IAAIE,MAAJ,IAAc,GAAzB;AACAJ,MAAIS,IAAJ,CAAS,EAAEL,QAAQ,GAAV,EAAeG,OAAO,kBAAtB,EAAT;AACD,CARD;;AAUA;AACAG,OAAOC,OAAP,GAAiBjB,GAAjB","file":"app.js","sourcesContent":["const express = require('express');\nconst graphqlHTTP = require('express-graphql');\nconst logger = require('morgan');\nconst cors = require('cors');\n\nconst routes = require('./routes/index');\n\n\n// GraphQL Schema\nimport schema from './graphql';\nimport { request } from 'http';\n\n\nconst app = express();\n\napp.use(cors());\napp.use(logger('dev'));\n\n// Handle our routes!\napp.use('/', routes);\n\n// Graph QL endpoint\napp.use('/graphql', graphqlHTTP(() => ({\n  schema,\n  graphiql: true,\n  pretty: true,\n})));\n\n\n// Error Handlers\n// catch 404 and forward to error handler\napp.use((req, res, next) => {\n  const err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handler\napp.use((err, req, res, next) => {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.json({ status: 401, error: 'Invalid Endpoint' });\n});\n\n// done! we export it so we can start the site in start.js\nmodule.exports = app;\n"]}